version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: skavtech-db
    restart: unless-stopped
    env_file:
      - ../.env.production
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-skavtech_prod}
      POSTGRES_USER: ${POSTGRES_USER:-skavtech_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - skavtech-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-skavtech_user} -d ${POSTGRES_DB:-skavtech_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security: Don't expose database port externally
    # ports:
    #   - "5432:5432"

  # Backend API Server
  backend:
    build:
      context: ..
      dockerfile: server/Dockerfile
    container_name: skavtech-backend
    restart: unless-stopped
    env_file:
      - ../.env.production
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://skavtech_user:${POSTGRES_PASSWORD}@db:5432/skavtech_prod
      SESSION_SECRET: ${SESSION_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    networks:
      - skavtech-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Security: Don't expose backend port externally
    # ports:
    #   - "4000:4000"

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: skavtech-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - skavtech-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Security: Don't expose Redis port externally
    # ports:
    #   - "6379:6379"

  # Frontend React Application
  frontend:
    build:
      context: ..
      dockerfile: client/Dockerfile
    container_name: skavtech-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - skavtech-network
    # Security: Don't expose frontend port externally
    # ports:
    #   - "3000:80"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.28-alpine-slim
    container_name: skavtech-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - skavtech-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  uploads_data:
    driver: local
  redis_data:
    driver: local

networks:
  skavtech-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16